{"ast":null,"code":"var _jsxFileName = \"/Users/ashish/Desktop/GuruDev/client/src/Pages/Questions/DisplayAnswer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport { Link, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Avatar from '../../components/Avatar/Avatar';\nimport { deleteAnswer } from '../../actions/question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayAnswer = ({\n  question,\n  handleShare\n}) => {\n  _s();\n\n  const [comment, setComment] = useState('');\n  const User = useSelector(state => state.currentUserReducer);\n  const {\n    id\n  } = useParams();\n  const dispatch = useDispatch();\n\n  const handleDelete = (answerId, noOfAnswers) => {\n    dispatch(deleteAnswer(id, answerId, noOfAnswers - 1));\n  };\n\n  const handle = (e, answerLength) => {\n    e.preventDefault();\n\n    if (User === null) {\n      alert('Login or Signup to answer a question');\n      Navigate('/Auth');\n    } else {\n      if (Answer === '') {\n        alert('Enter an answer before submitting');\n      } else {\n        dispatch(postAnswer({\n          id,\n          noOfAnswers: answerLength + 1,\n          answerBody: Answer,\n          userAnswered: User.result.name\n        }));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: question.answer.map(ans => {\n      var _User$result;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"display-ans\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: ans.answerBody\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-actions-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleShare,\n              children: \"Share\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 33\n            }, this), (User === null || User === void 0 ? void 0 : (_User$result = User.result) === null || _User$result === void 0 ? void 0 : _User$result._id) === (ans === null || ans === void 0 ? void 0 : ans.userId) && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleDelete(ans._id, question.noOfAnswers),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentbox\",\n            children: User && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: e => {\n                  handleComment(e, question.answer.comment.length);\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"comment\",\n                  children: [\"comment:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    id: \"comment\",\n                    name: \"comment\",\n                    onChange: e => {\n                      setComment(e.target.value);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 54,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 47\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"delete\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    style: {\n                      color: 'white',\n                      fontSize: '13px',\n                      padding: '5px 5px',\n                      backgroundColor: '#009dff',\n                      borderRadius: '4px',\n                      marginLeft: '2px',\n                      cursor: 'pointer',\n                      transition: '0.2s'\n                    },\n                    id: \"co      mmentdeletebtn\",\n                    type: \"button\",\n                    children: \"post\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 57,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 47\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"answered \", moment(ans.answeredOn).fromNow()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/Users/${ans.userId}`,\n              className: \"user-link\",\n              style: {\n                color: '#0086d8'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                backgroundColor: \"lightgreen\",\n                px: \"8px\",\n                py: \"5px\",\n                borderRadius: \"4px\",\n                children: ans.userAnswered.charAt(0).toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: ans.userAnswered\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)]\n      }, ans._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DisplayAnswer, \"2KNBLYONARYv3Kg6R4GjOIZx5vs=\", false, function () {\n  return [useSelector, useParams, useDispatch];\n});\n\n_c = DisplayAnswer;\nexport default DisplayAnswer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayAnswer\");","map":{"version":3,"sources":["/Users/ashish/Desktop/GuruDev/client/src/Pages/Questions/DisplayAnswer.jsx"],"names":["React","useState","moment","Link","useParams","useSelector","useDispatch","Avatar","deleteAnswer","DisplayAnswer","question","handleShare","comment","setComment","User","state","currentUserReducer","id","dispatch","handleDelete","answerId","noOfAnswers","handle","e","answerLength","preventDefault","alert","Navigate","Answer","postAnswer","answerBody","userAnswered","result","name","answer","map","ans","_id","userId","handleComment","length","target","value","color","fontSize","padding","backgroundColor","borderRadius","marginLeft","cursor","transition","answeredOn","fromNow","charAt","toUpperCase"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,YAAT,QAA6B,wBAA7B;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA6B;AAAA;;AAC/C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAuBZ,QAAQ,CAAC,EAAD,CAArC;AAEA,QAAMa,IAAI,GAAGT,WAAW,CAAEU,KAAD,IAAYA,KAAK,CAACC,kBAAnB,CAAxB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAASb,SAAS,EAAxB;AACA,QAAMc,QAAQ,GAAGZ,WAAW,EAA5B;;AACA,QAAMa,YAAY,GAAG,CAACC,QAAD,EAAWC,WAAX,KAA2B;AAC5CH,IAAAA,QAAQ,CAACV,YAAY,CAACS,EAAD,EAAKG,QAAL,EAAeC,WAAW,GAAG,CAA7B,CAAb,CAAR;AACH,GAFD;;AAIA,QAAMC,MAAM,GAAG,CAACC,CAAD,EAAIC,YAAJ,KAAoB;AAC/BD,IAAAA,CAAC,CAACE,cAAF;;AACA,QAAGX,IAAI,KAAK,IAAZ,EAAiB;AACbY,MAAAA,KAAK,CAAC,sCAAD,CAAL;AACAC,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACH,KAHD,MAGK;AACD,UAAGC,MAAM,KAAK,EAAd,EAAiB;AACbF,QAAAA,KAAK,CAAC,mCAAD,CAAL;AACH,OAFD,MAEM;AACFR,QAAAA,QAAQ,CAACW,UAAU,CAAC;AAAEZ,UAAAA,EAAF;AAAMI,UAAAA,WAAW,EAAEG,YAAY,GAAG,CAAlC;AAAqCM,UAAAA,UAAU,EAAEF,MAAjD;AAAyDG,UAAAA,YAAY,EAAEjB,IAAI,CAACkB,MAAL,CAAYC;AAAnF,SAAD,CAAX,CAAR;AACH;AACJ;AACJ,GAZD;;AAcA,sBACI;AAAA,cAEQvB,QAAQ,CAACwB,MAAT,CAAgBC,GAAhB,CAAqBC,GAAD;AAAA;;AAAA,0BAChB;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACI;AAAA,oBAAIA,GAAG,CAACN;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,uBAAf;AAAA,kCACI;AAAA,oCACI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,OAAO,EAAEnB,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAGQ,CAAAG,IAAI,SAAJ,IAAAA,IAAI,WAAJ,4BAAAA,IAAI,CAAEkB,MAAN,8DAAcK,GAAd,OAAsBD,GAAtB,aAAsBA,GAAtB,uBAAsBA,GAAG,CAAEE,MAA3B,kBACI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,OAAO,EAAE,MAAMnB,YAAY,CAACiB,GAAG,CAACC,GAAL,EAAU3B,QAAQ,CAACW,WAAnB,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eASI;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,sBAEQP,IAAI,iBACA;AAAA,qCACI;AAAM,gBAAA,QAAQ,EAAIS,CAAD,IAAO;AAAEgB,kBAAAA,aAAa,CAAChB,CAAD,EAAIb,QAAQ,CAACwB,MAAT,CAAgBtB,OAAhB,CAAwB4B,MAA5B,CAAb;AAAkD,iBAA5E;AAAA,wCACE;AAAO,kBAAA,OAAO,EAAC,SAAf;AAAA,sDACE;AAAO,oBAAA,IAAI,EAAC,MAAZ;AAAmB,oBAAA,EAAE,EAAC,SAAtB;AAAgC,oBAAA,IAAI,EAAC,SAArC;AAA+C,oBAAA,QAAQ,EAAGjB,CAAD,IAAO;AAACV,sBAAAA,UAAU,CAACU,CAAC,CAACkB,MAAF,CAASC,KAAV,CAAV;AAA2B;AAA5F;AAAA;AAAA;AAAA;AAAA,0BADF;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAIE;AAAO,kBAAA,OAAO,EAAC,QAAf;AAAA,yCACM;AACA,oBAAA,KAAK,EAAE;AAAEC,sBAAAA,KAAK,EAAC,OAAR;AACPC,sBAAAA,QAAQ,EAAC,MADF;AAEPC,sBAAAA,OAAO,EAAC,SAFD;AAEWC,sBAAAA,eAAe,EAAE,SAF5B;AAEsCC,sBAAAA,YAAY,EAAC,KAFnD;AAEyDC,sBAAAA,UAAU,EAAC,KAFpE;AAE0EC,sBAAAA,MAAM,EAAC,SAFjF;AAE2FC,sBAAAA,UAAU,EAAC;AAFtG,qBADP;AAIA,oBAAA,EAAE,EAAC,wBAJH;AAI2B,oBAAA,IAAI,EAAE,QAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,wBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHZ;AAAA;AAAA;AAAA;AAAA,kBATJ,eAkCI;AAAA,oCACI;AAAA,sCAAahD,MAAM,CAACkC,GAAG,CAACe,UAAL,CAAN,CAAuBC,OAAvB,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,IAAD;AAAM,cAAA,EAAE,EAAG,UAAShB,GAAG,CAACE,MAAO,EAA/B;AAAkC,cAAA,SAAS,EAAC,WAA5C;AAAwD,cAAA,KAAK,EAAE;AAACK,gBAAAA,KAAK,EAAC;AAAP,eAA/D;AAAA,sCACI,QAAC,MAAD;AAAQ,gBAAA,eAAe,EAAC,YAAxB;AAAqC,gBAAA,EAAE,EAAC,KAAxC;AAA8C,gBAAA,EAAE,EAAC,KAAjD;AAAuD,gBAAA,YAAY,EAAC,KAApE;AAAA,0BAA2EP,GAAG,CAACL,YAAJ,CAAiBsB,MAAjB,CAAwB,CAAxB,EAA2BC,WAA3B;AAA3E;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA,0BACKlB,GAAG,CAACL;AADT;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAkCK,GAAG,CAACC,GAAtC;AAAA;AAAA;AAAA;AAAA,cADgB;AAAA,KAApB;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAuDH,CA/ED;;GAAM5B,a;UAGWJ,W,EACED,S,EACEE,W;;;KALfG,a;AAiFN,eAAeA,aAAf","sourcesContent":["import React ,{useState} from 'react'\nimport moment from 'moment'\nimport { Link, useParams } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Avatar from '../../components/Avatar/Avatar'\nimport { deleteAnswer } from '../../actions/question'\n\nconst DisplayAnswer = ({question, handleShare}) => {\n    const [comment, setComment]= useState('');\n\n    const User = useSelector((state) => (state.currentUserReducer))\n    const { id } = useParams()\n    const dispatch = useDispatch()\n    const handleDelete = (answerId, noOfAnswers) => {\n        dispatch(deleteAnswer(id, answerId, noOfAnswers - 1))\n    }\n\n    const handle = (e, answerLength) =>{\n        e.preventDefault()\n        if(User === null){\n            alert('Login or Signup to answer a question')\n            Navigate('/Auth')\n        }else{\n            if(Answer === ''){\n                alert('Enter an answer before submitting')\n            } else{\n                dispatch(postAnswer({ id, noOfAnswers: answerLength + 1, answerBody: Answer, userAnswered: User.result.name }))\n            }\n        }\n    }\n\n    return (\n        <div>\n            {\n                question.answer.map((ans) => (\n                    <div className=\"display-ans\" key={ans._id}>\n                        <p>{ans.answerBody}</p>\n                        <div className=\"question-actions-user\">\n                            <div>\n                                <button type=\"button\" onClick={handleShare}>Share</button>\n                                {\n                                    User?.result?._id === ans?.userId && (\n                                        <button type='button' onClick={() => handleDelete(ans._id, question.noOfAnswers )}>Delete</button>\n                                    )\n                                }\n                            </div>\n                            <div className='commentbox'>\n                                {\n                                    User && (\n                                        <div>\n                                            <form onSubmit={ (e) => { handleComment(e, question.answer.comment.length) }}>\n                                              <label htmlFor=\"comment\">comment:\n                                                <input type=\"text\" id=\"comment\" name=\"comment\" onChange={(e) => {setComment(e.target.value)}}/>\n                                              </label>\n                                              <label htmlFor=\"delete\">\n                                                    <button \n                                                    style={{ color:'white',\n                                                    fontSize:'13px', \n                                                    padding:'5px 5px',backgroundColor: '#009dff',borderRadius:'4px',marginLeft:'2px',cursor:'pointer',transition:'0.2s'}} \n                                                    id='co      mmentdeletebtn'type ='button' >post</button>\n\n                                             </label>\n\n\n                                            </form>\n                                            \n                                        </div>\n                                        \n                                    )\n                                }   \n                            </div>\n                            <div>\n                                <p>answered {moment(ans.answeredOn).fromNow()}</p>\n                                <Link to={`/Users/${ans.userId}`} className='user-link' style={{color:'#0086d8'}}>\n                                    <Avatar backgroundColor=\"lightgreen\" px='8px' py='5px' borderRadius='4px'>{ans.userAnswered.charAt(0).toUpperCase()}</Avatar>\n                                    <div>\n                                        {ans.userAnswered}\n                                    </div>\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default DisplayAnswer\n"]},"metadata":{},"sourceType":"module"}