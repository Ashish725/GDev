{"ast":null,"code":"var _jsxFileName = \"/Users/ashish/Desktop/GuruDev/client/src/Pages/Questions/DisplayAnswer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport moment from 'moment';\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Comment from './Comment';\nimport Avatar from '../../components/Avatar/Avatar';\nimport { deleteAnswer, postComment } from '../../actions/question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayAnswer = ({\n  question,\n  handleShare\n}) => {\n  _s();\n\n  const User = useSelector(state => state.currentUserReducer);\n  const {\n    id\n  } = useParams();\n  const dispatch = useDispatch();\n  const Navigate = useNavigate();\n\n  const handleDelete = (answerId, noOfAnswers) => {\n    dispatch(deleteAnswer(id, answerId, noOfAnswers - 1));\n  };\n\n  const handleComment = e => {\n    e.preventDefault();\n\n    if (User === null) {\n      alert('Login or Signup to answer a question');\n      Navigate('/Auth');\n    } else {\n      if (comment === '') {\n        alert('Enter an answer before submitting');\n      } else {\n        dispatch(postComment({\n          id,\n          commentBody: comment,\n          userCommented: User.result.name\n        }));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: question.answer.map(ans => {\n      var _User$result;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"display-ans\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: ans.answerBody\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-actions-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleShare,\n              children: \"Share\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 33\n            }, this), (User === null || User === void 0 ? void 0 : (_User$result = User.result) === null || _User$result === void 0 ? void 0 : _User$result._id) === (ans === null || ans === void 0 ? void 0 : ans.userId) && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleDelete(ans._id, question.noOfAnswers),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Comment, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"answered \", moment(ans.answeredOn).fromNow()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/Users/${ans.userId}`,\n              className: \"user-link\",\n              style: {\n                color: '#0086d8'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                backgroundColor: \"lightgreen\",\n                px: \"8px\",\n                py: \"5px\",\n                borderRadius: \"4px\",\n                children: ans.userAnswered.charAt(0).toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: ans.userAnswered\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)]\n      }, ans._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DisplayAnswer, \"a9DNr8IM6dopS50pSVHML2bEwIc=\", false, function () {\n  return [useSelector, useParams, useDispatch, useNavigate];\n});\n\n_c = DisplayAnswer;\nexport default DisplayAnswer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayAnswer\");","map":{"version":3,"sources":["/Users/ashish/Desktop/GuruDev/client/src/Pages/Questions/DisplayAnswer.jsx"],"names":["React","moment","Link","useParams","useNavigate","useSelector","useDispatch","Comment","Avatar","deleteAnswer","postComment","DisplayAnswer","question","handleShare","User","state","currentUserReducer","id","dispatch","Navigate","handleDelete","answerId","noOfAnswers","handleComment","e","preventDefault","alert","comment","commentBody","userCommented","result","name","answer","map","ans","answerBody","_id","userId","answeredOn","fromNow","color","userAnswered","charAt","toUpperCase"],"mappings":"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","sourcesContent":["import React  from 'react'\nimport moment from 'moment'\nimport { Link, useParams,useNavigate } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Comment from './Comment'\nimport Avatar from '../../components/Avatar/Avatar'\nimport { deleteAnswer ,postComment} from '../../actions/question'\n\n\nconst DisplayAnswer = ({question, handleShare}) => {\n    \n\n    const User = useSelector((state) => (state.currentUserReducer))\n    const { id } = useParams()\n    const dispatch = useDispatch()\n    const Navigate = useNavigate()\n    const handleDelete = (answerId, noOfAnswers) => {\n        dispatch(deleteAnswer(id, answerId, noOfAnswers - 1))\n    }\n\n    const handleComment = (e) =>{\n        e.preventDefault()\n        if(User === null){\n            alert('Login or Signup to answer a question')\n            Navigate('/Auth')\n        }else{\n            if(comment === ''){\n                alert('Enter an answer before submitting')\n            } else{\n                dispatch(postComment({ id, commentBody: comment, userCommented: User.result.name }))\n            }\n        }\n    }\n\n    return (\n        <div>\n            {\n                question.answer.map((ans) => (\n                    <div className=\"display-ans\" key={ans._id}>\n                        <p>{ans.answerBody}</p>\n                        <div className=\"question-actions-user\">\n                            <div>\n                                <button type=\"button\" onClick={handleShare}>Share</button>\n                                {\n                                    User?.result?._id === ans?.userId && (\n                                        <button type='button' onClick={() => handleDelete(ans._id, question.noOfAnswers )}>Delete</button>\n                                    )\n                                }\n                            </div>\n                            <Comment/>\n                            <div>\n                                <p>answered {moment(ans.answeredOn).fromNow()}</p>\n                                <Link to={`/Users/${ans.userId}`} className='user-link' style={{color:'#0086d8'}}>\n                                    <Avatar backgroundColor=\"lightgreen\" px='8px' py='5px' borderRadius='4px'>{ans.userAnswered.charAt(0).toUpperCase()}</Avatar>\n                                    <div>\n                                        {ans.userAnswered}\n                                    </div>\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default DisplayAnswer\n"]},"metadata":{},"sourceType":"module"}