{"ast":null,"code":"var _jsxFileName = \"/Users/ashish/Downloads/Stack-overflow-main/client/src/Pages/Questions/QuestionsDetails.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams, Link, useNavigate, useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport copy from 'copy-to-clipboard';\nimport upvote from \"../../assets/sort-up.svg\";\nimport downvote from \"../../assets/sort-down.svg\";\nimport './Questions.css';\nimport Avatar from '../../components/Avatar/Avatar';\nimport DisplayAnswer from './DisplayAnswer';\nimport { postAnswer, deleteQuestion, voteQuestion } from '../../actions/question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionsDetails = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const questionsList = useSelector(state => state.questionsReducer); // var questionsList = [{ \n  //     _id: '1',\n  //     upVotes: 3,\n  //     downVotes: 2,\n  //     noOfAnswers: 2,\n  //     questionTitle: \"What is a function?\",\n  //     questionBody: \"It meant to be\",\n  //     questionTags: [\"java\", \"node js\", \"react js\", \"mongo db\", \"express js\"],\n  //     userPosted: \"mano\",\n  //     userId: 1,\n  //     askedOn: \"jan 1\",\n  //     answer: [{\n  //         answerBody: \"Answer\",\n  //         userAnswered: 'kumar',\n  //         answeredOn: \"jan 2\",\n  //         userId: 2,\n  //     }]\n  // },{ \n  //     _id: '2',\n  //     upVotes: 3,\n  //     downVotes: 2,\n  //     noOfAnswers: 0,\n  //     questionTitle: \"What is a function?\",\n  //     questionBody: \"It meant to be\",\n  //     questionTags: [\"javascript\", \"R\", \"python\"],\n  //     userPosted: \"mano\",\n  //     askedOn: \"jan 1\",\n  //     userId: 1,\n  //     answer: [{\n  //         answerBody: \"Answer\",\n  //         userAnswered: 'kumar',\n  //         answeredOn: \"jan 2\",\n  //         userId: 2,\n  //     }]\n  // },{ \n  //     _id: '3',\n  //     upVotes: 3,\n  //     downVotes: 2,\n  //     noOfAnswers: 0,\n  //     questionTitle: \"What is a function?\",\n  //     questionBody: \"It meant to be\",\n  //     questionTags: [\"javascript\", \"R\", \"python\"],\n  //     userPosted: \"mano\",\n  //     askedOn: \"jan 1\",\n  //     userId: 1,\n  //     answer: [{\n  //         answerBody: \"Answer\",\n  //         userAnswered: 'kumar',\n  //         answeredOn: \"jan 2\",\n  //         userId: 2,\n  //     }]\n  // }]\n\n  const [Answer, setAnswer] = useState('');\n  const Navigate = useNavigate();\n  const dispatch = useDispatch();\n  const User = useSelector(state => state.currentUserReducer);\n  const location = useLocation();\n  const url = 'http://localhost:3000';\n\n  const handlePostAns = (e, answerLength) => {\n    e.preventDefault();\n\n    if (User === null) {\n      alert('Login or Signup to answer a question');\n      Navigate('/Auth');\n    } else {\n      if (Answer === '') {\n        alert('Enter an answer before submitting');\n      } else {\n        dispatch(postAnswer({\n          id,\n          noOfAnswers: answerLength + 1,\n          answerBody: Answer,\n          userAnswered: User.result.name\n        }));\n      }\n    }\n  };\n\n  const handleShare = () => {\n    copy(url + location.pathname);\n    alert('Copied url : ' + url + location.pathname);\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteQuestion(id, Navigate));\n  };\n\n  const handleUpVote = () => {\n    dispatch(voteQuestion(id, 'upVote'));\n  };\n\n  const handleDownVote = () => {\n    dispatch(voteQuestion(id, 'downVote'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-details-page\",\n    children: questionsList.data === null ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: questionsList.data.filter(question => question._id === id).map(question => {\n        var _User$result;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"question-details-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: question.questionTitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-details-container-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-votes\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: upvote,\n                  alt: \"\",\n                  width: \"18\",\n                  className: \"votes-icon\",\n                  onClick: handleUpVote\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: question.upVote.length - question.downVote.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: downvote,\n                  alt: \"\",\n                  width: \"18\",\n                  className: \"votes-icon\",\n                  onClick: handleDownVote\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: \"100%\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"question-body\",\n                  children: question.questionBody\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question-details-tags\",\n                  children: question.questionTags.map(tag => /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: tag\n                  }, tag, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question-actions-user\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      onClick: handleShare,\n                      children: \"Share\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 53\n                    }, this), (User === null || User === void 0 ? void 0 : (_User$result = User.result) === null || _User$result === void 0 ? void 0 : _User$result._id) === (question === null || question === void 0 ? void 0 : question.userId) && /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      onClick: handleDelete,\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 138,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"asked \", moment(question.askedOn).fromNow()]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 143,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/Users/${question.userId}`,\n                      className: \"user-link\",\n                      style: {\n                        color: '#0086d8'\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                        backgroundColor: \"orange\",\n                        px: \"8px\",\n                        py: \"5px\",\n                        borderRadius: \"4px\",\n                        children: question.userPosted.charAt(0).toUpperCase()\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 145,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: question.userPosted\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 146,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 144,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }, this), question.noOfAnswers !== 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [question.noOfAnswers, \" Answers\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(DisplayAnswer, {\n              question: question,\n              handleShare: handleShare\n            }, question._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"post-ans-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Your Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: e => {\n                handlePostAns(e, question.answer.length);\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                name: \"\",\n                id: \"\",\n                cols: \"30\",\n                rows: \"10\",\n                onChange: e => setAnswer(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 138\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"Submit\",\n                className: \"post-ans-btn\",\n                value: \"Post Your Answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Browse other Question tagged\", question.questionTags.map(tag => /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/Tags\",\n                className: \"ans-tags\",\n                children: [\" \", tag, \" \"]\n              }, tag, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 49\n              }, this)), \" or\", /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/AskQuestion\",\n                style: {\n                  textDecoration: \"none\",\n                  color: \"#009dff\"\n                },\n                children: \" ask your own question.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 33\n          }, this)]\n        }, question._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionsDetails, \"CmSE2iYeAZzlTF2aAj1Gs4KdxY0=\", false, function () {\n  return [useParams, useSelector, useNavigate, useDispatch, useSelector, useLocation];\n});\n\n_c = QuestionsDetails;\nexport default QuestionsDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsDetails\");","map":{"version":3,"sources":["/Users/ashish/Downloads/Stack-overflow-main/client/src/Pages/Questions/QuestionsDetails.jsx"],"names":["React","useState","useParams","Link","useNavigate","useLocation","useSelector","useDispatch","moment","copy","Avatar","DisplayAnswer","postAnswer","deleteQuestion","voteQuestion","QuestionsDetails","id","questionsList","state","questionsReducer","Answer","setAnswer","Navigate","dispatch","User","currentUserReducer","location","url","handlePostAns","e","answerLength","preventDefault","alert","noOfAnswers","answerBody","userAnswered","result","name","handleShare","pathname","handleDelete","handleUpVote","handleDownVote","data","filter","question","_id","map","questionTitle","upvote","upVote","length","downVote","downvote","width","questionBody","questionTags","tag","userId","askedOn","fromNow","color","userPosted","charAt","toUpperCase","answer","target","value","textDecoration"],"mappings":"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","sourcesContent":["import React, { useState} from 'react'\nimport { useParams, Link, useNavigate, useLocation } from 'react-router-dom'\nimport { useSelector, useDispatch} from 'react-redux'\nimport moment from 'moment'\nimport copy from 'copy-to-clipboard'\n\nimport upvote from '../../assets/sort-up.svg'\nimport downvote from '../../assets/sort-down.svg'\nimport './Questions.css'\nimport Avatar from '../../components/Avatar/Avatar'\nimport DisplayAnswer from './DisplayAnswer'\nimport { postAnswer, deleteQuestion, voteQuestion } from '../../actions/question'\n\nconst QuestionsDetails = () => {\n    const { id } = useParams()\n    const questionsList = useSelector(state => state.questionsReducer)\n    // var questionsList = [{ \n    //     _id: '1',\n    //     upVotes: 3,\n    //     downVotes: 2,\n    //     noOfAnswers: 2,\n    //     questionTitle: \"What is a function?\",\n    //     questionBody: \"It meant to be\",\n    //     questionTags: [\"java\", \"node js\", \"react js\", \"mongo db\", \"express js\"],\n    //     userPosted: \"mano\",\n    //     userId: 1,\n    //     askedOn: \"jan 1\",\n    //     answer: [{\n    //         answerBody: \"Answer\",\n    //         userAnswered: 'kumar',\n    //         answeredOn: \"jan 2\",\n    //         userId: 2,\n    //     }]\n    // },{ \n    //     _id: '2',\n    //     upVotes: 3,\n    //     downVotes: 2,\n    //     noOfAnswers: 0,\n    //     questionTitle: \"What is a function?\",\n    //     questionBody: \"It meant to be\",\n    //     questionTags: [\"javascript\", \"R\", \"python\"],\n    //     userPosted: \"mano\",\n    //     askedOn: \"jan 1\",\n    //     userId: 1,\n    //     answer: [{\n    //         answerBody: \"Answer\",\n    //         userAnswered: 'kumar',\n    //         answeredOn: \"jan 2\",\n    //         userId: 2,\n    //     }]\n    // },{ \n    //     _id: '3',\n    //     upVotes: 3,\n    //     downVotes: 2,\n    //     noOfAnswers: 0,\n    //     questionTitle: \"What is a function?\",\n    //     questionBody: \"It meant to be\",\n    //     questionTags: [\"javascript\", \"R\", \"python\"],\n    //     userPosted: \"mano\",\n    //     askedOn: \"jan 1\",\n    //     userId: 1,\n    //     answer: [{\n    //         answerBody: \"Answer\",\n    //         userAnswered: 'kumar',\n    //         answeredOn: \"jan 2\",\n    //         userId: 2,\n    //     }]\n    // }]\n    const [Answer, setAnswer] = useState('')\n    const Navigate = useNavigate()\n    const dispatch = useDispatch()\n    const User = useSelector((state) => (state.currentUserReducer))\n    const location = useLocation()\n    const url = 'http://localhost:3000'\n\n    const handlePostAns = (e, answerLength) =>{\n        e.preventDefault()\n        if(User === null){\n            alert('Login or Signup to answer a question')\n            Navigate('/Auth')\n        }else{\n            if(Answer === ''){\n                alert('Enter an answer before submitting')\n            } else{\n                dispatch(postAnswer({ id, noOfAnswers: answerLength + 1, answerBody: Answer, userAnswered: User.result.name }))\n            }\n        }\n    }\n\n    const handleShare = () => {\n        copy(url+location.pathname)\n        alert('Copied url : '+url+location.pathname)\n    }\n\n    const handleDelete = () => {\n        dispatch(deleteQuestion(id, Navigate))\n    }\n\n    const handleUpVote = () => {\n        dispatch(voteQuestion(id, 'upVote'))\n    }\n\n    const handleDownVote = () => {\n        dispatch(voteQuestion(id, 'downVote'))\n    }\n\n    return (\n        <div className='question-details-page'>\n            {\n                questionsList.data === null ?\n                <h1>Loading...</h1> :\n                <>\n                    {\n                        questionsList.data.filter(question => question._id === id).map(question => (\n                            <div key={question._id}>\n                                <section className='question-details-container'>\n                                    <h1>{question.questionTitle}</h1>\n                                    <div className='question-details-container-2'>\n                                        <div className=\"question-votes\">\n                                            <img src={upvote} alt=\"\" width='18' className='votes-icon' onClick={handleUpVote}/>\n                                            <p>{question.upVote.length - question.downVote.length}</p>\n                                            <img src={downvote} alt=\"\" width='18' className='votes-icon' onClick={handleDownVote}/>\n                                        </div>\n                                        <div style={{width: \"100%\"}}>\n                                            <p className='question-body'>{question.questionBody}</p>\n                                            <div className=\"question-details-tags\">\n                                                {\n                                                    question.questionTags.map((tag) => (\n                                                        <p key={tag}>{tag}</p>\n                                                    ))\n                                                }\n                                            </div>\n                                            <div className=\"question-actions-user\">\n                                                <div>\n                                                    <button type='button' onClick={handleShare}>Share</button>\n                                                    {\n                                                        User?.result?._id === question?.userId && (\n                                                            <button type='button' onClick={handleDelete}>Delete</button>\n                                                        )\n                                                    }\n                                                </div>\n                                                <div>\n                                                    <p>asked {moment(question.askedOn).fromNow()}</p>\n                                                    <Link to={`/Users/${question.userId}`} className='user-link' style={{color:'#0086d8'}}>\n                                                        <Avatar backgroundColor=\"orange\" px='8px' py='5px' borderRadius=\"4px\">{question.userPosted.charAt(0).toUpperCase()}</Avatar>\n                                                        <div>\n                                                            {question.userPosted}\n                                                        </div>\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </section>\n                                {\n                                    question.noOfAnswers !== 0 && (\n                                        <section>\n                                            <h3>{question.noOfAnswers} Answers</h3>\n                                            <DisplayAnswer key={question._id} question={question} handleShare={handleShare}/>\n                                        </section>\n                                    )\n                                }\n                                <section className='post-ans-container'>\n                                    <h3>Your Answer</h3>\n                                    <form onSubmit={ (e) => { handlePostAns(e, question.answer.length) }}>\n                                        <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" onChange={e => setAnswer(e.target.value)}></textarea><br />\n                                        <input type=\"Submit\" className='post-ans-btn' value='Post Your Answer'/>\n                                    </form>\n                                    <p>\n                                        Browse other Question tagged\n                                        {\n                                            question.questionTags.map((tag) => (\n                                                <Link to='/Tags' key={tag} className='ans-tags'> {tag} </Link>\n                                            ))\n                                        } or \n                                        <Link to='/AskQuestion' style={{textDecoration: \"none\", color:\"#009dff\"}}> ask your own question.</Link>\n                                    </p>\n                                </section>\n                            </div>\n                        ))\n                    }\n                </>\n            }\n        </div>\n    )\n}\n\nexport default QuestionsDetails\n"]},"metadata":{},"sourceType":"module"}