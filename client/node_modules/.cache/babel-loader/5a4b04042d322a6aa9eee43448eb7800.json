{"ast":null,"code":"import * as api from '../api/index';\nexport const askQuestion = (questionData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.postQuestion(questionData);\n    dispatch({\n      type: \"POST_QUESTION\",\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllQuestions = () => async disptach => {\n  try {\n    const {\n      data\n    } = await api.getAllQuestions();\n    disptach({\n      type: 'FETCH_ALL_QUESTIONS',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteQuestion = (id, navigate) => async dispatch => {\n  try {\n    await api.deleteQuestion(id);\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const voteQuestion = (id, value) => async dispatch => {\n  try {\n    await api.voteQuestion(id, value);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postAnswer = answerData => async dispatch => {\n  try {\n    const {\n      id,\n      noOfAnswers,\n      answerBody,\n      userAnswered\n    } = answerData;\n    const {\n      data\n    } = await api.postAnswer(id, noOfAnswers, answerBody, userAnswered);\n    dispatch({\n      type: 'POST_ANSWER',\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async dispatch => {\n  try {\n    await api.deleteAnswer(id, answerId, noOfAnswers);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/ashish/Desktop/GuruDev/client/src/actions/question.js"],"names":["api","askQuestion","questionData","navigate","dispatch","data","postQuestion","type","payload","fetchAllQuestions","error","console","log","disptach","getAllQuestions","deleteQuestion","id","voteQuestion","value","postAnswer","answerData","noOfAnswers","answerBody","userAnswered","deleteAnswer","answerId"],"mappings":"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","sourcesContent":["import * as api from '../api/index'\n\nexport const askQuestion = (questionData, navigate) => async (dispatch) => {\n    try {\n        const { data } = await api.postQuestion(questionData)\n        dispatch({ type: \"POST_QUESTION\", payload: data})\n        dispatch(fetchAllQuestions())\n        navigate('/')\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const fetchAllQuestions = () => async (disptach) => {\n    try {\n        const { data } = await api.getAllQuestions()\n        disptach({ type: 'FETCH_ALL_QUESTIONS', payload: data})\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const deleteQuestion = (id, navigate) => async (dispatch) => {\n    try {\n        await api.deleteQuestion(id)\n        dispatch(fetchAllQuestions())\n        navigate('/')\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const voteQuestion = (id, value) => async (dispatch) => {\n    try {\n        await api.voteQuestion(id, value)\n        dispatch(fetchAllQuestions())\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const postAnswer = (answerData) => async (dispatch) => {\n    try {\n        const { id, noOfAnswers, answerBody, userAnswered } = answerData;\n        const { data } = await api.postAnswer( id, noOfAnswers, answerBody, userAnswered )\n        dispatch({ type: 'POST_ANSWER', payload: data})\n        dispatch(fetchAllQuestions())\n    } catch (error) {\n        console.log(error)\n    }\n}\n \n\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async (dispatch) => {\n    try {\n        await api.deleteAnswer(id, answerId, noOfAnswers)\n        dispatch(fetchAllQuestions())\n    } catch (error) {\n        console.log(error)\n    }\n} "]},"metadata":{},"sourceType":"module"}